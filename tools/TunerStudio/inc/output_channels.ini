
;[OutputChannels]
   ; The number of bytes MegaTune or TunerStudio should expect as a result
   ; of sending the "A" command to Tuareg is determined
   ; by the value of ochBlockSize, so be very careful when
   ; you change it.

    deadValue        = { 0 }
    ochGetCommand    = "A"
    ochBlockSize     =  110


    secl                = scalar,  U08,     0, "sec",    1.000, 0.000

  ; tuareg bits
    tRunInhibit         = bits,    U32,    nextOffset, [0:0]
    tCrashSensor        = bits,    U32,    lastOffset, [1:1]
    tRunSwitch          = bits,    U32,    lastOffset, [2:2]
    tSidestandSensor    = bits,    U32,    lastOffset, [3:3]
    tOverheat           = bits,    U32,    lastOffset, [4:4]
    tServiceMode        = bits,    U32,    lastOffset, [5:5]
    tLimpMode           = bits,    U32,    lastOffset, [6:6]
    tRevLimiter         = bits,    U32,    lastOffset, [7:7]
    tStandby            = bits,    U32,    lastOffset, [8:8]
    tCranking           = bits,    U32,    lastOffset, [9:9]
    tFuelPump           = bits,    U32,    lastOffset, [10:10]
    tMil                = bits,    U32,    lastOffset, [11:11]
    tSyslogUpdate       = bits,    U32,    lastOffset, [12:12]
    tDatalogUpdate      = bits,    U32,    lastOffset, [13:13]
    tHgspdLogUpdate     = bits,    U32,    lastOffset, [14:14]
    tFatalError         = bits,    U32,    lastOffset, [15:15]
    tDecoderConfigErr   = bits,    U32,    lastOffset, [16:16]
    tIgnitionConfigErr  = bits,    U32,    lastOffset, [17:17]
    tTuaregConfigErr    = bits,    U32,    lastOffset, [18:18]
    tFuelingConfigErr   = bits,    U32,    lastOffset, [19:19]
    tSensorCalibErr     = bits,    U32,    lastOffset, [20:20]
    tO2SensorErr        = bits,    U32,    lastOffset, [21:21]
    tTpsSensorErr       = bits,    U32,    lastOffset, [22:22]
    tIatSensorErr       = bits,    U32,    lastOffset, [23:23]
    tCltSensorErr       = bits,    U32,    lastOffset, [24:24]
    tVbatSensorErr      = bits,    U32,    lastOffset, [25:25]
    tKnockSensorErr     = bits,    U32,    lastOffset, [26:26]
    tBaroSensorErr      = bits,    U32,    lastOffset, [27:27]
    tGearSensorErr      = bits,    U32,    lastOffset, [28:28]
    tMapSensorErr       = bits,    U32,    lastOffset, [29:29]
    tCiSensorErr        = bits,    U32,    lastOffset, [30:30]

    ;comm
    comCalModPerm   = bits,    U08,    nextOffset, [0:0]
    comIgnModPerm   = bits,    U08,    lastOffset, [1:1]
    comFuelModPerm  = bits,    U08,    lastOffset, [2:2]
    comDecModPerm   = bits,    U08,    lastOffset, [3:3]
    comTsetupPerm   = bits,    U08,    lastOffset, [4:4]
    comBurnPerm     = bits,    U08,    lastOffset, [5:5]
    comFaultLogPerm = bits,    U08,    lastOffset, [6:6]

    rpm             = scalar,   U16,    nextOffset, "rpm",    1.000, 0.000
    ddt_rpm         = scalar,   F32,    nextOffset, "rpm/s",  1.000, 0.000

    MAP             = scalar,   F32,    nextOffset, "kpa",    1.000, 0.000
    MAPdot          = scalar,   F32,    nextOffset, "kpa",    1.000, 0.000
    baro            = scalar,   F32,    nextOffset, "kpa",      1.000, 0.000
    TPS             = scalar,   F32,    nextOffset, "deg",      1.000, 0.000
    TPSdot          = scalar,   F32,    nextOffset, "deg/s",    1.000, 0.000
    IAT             = scalar,   F32,    nextOffset, "C",    1.000, -273.15
    CLT             = scalar,   F32,    nextOffset, "C",    1.000, -273.15
    battery         = scalar,   F32,    nextOffset, "V",      1.000, 0.000
    AFR             = scalar,   F32,    nextOffset, "O2",     1.000, 0.000
    Knock_level     = scalar,   F32,    nextOffset, "Knock",     1.000, 0.000
    IVT             = scalar,   F32,    nextOffset, "C",    1.000, -273.15

    gear            = scalar,   U08,    nextOffset, "gear",    1.000, 0.000
    ground_speed    = scalar,   U16,    nextOffset, "mm/s",    1.000, 0.000
    EngineRunTime   = scalar,   U32,    nextOffset, "#",  1.000, 0.000

    ;ignition
    ignValid         = bits,    U08,    nextOffset, [0:0]
    ignDynamic       = bits,    U08,    lastOffset, [1:1]
    ignSeqMode       = bits,    U08,    lastOffset, [2:2]
    ignColdIdle      = bits,    U08,    lastOffset, [3:3]
    ignAdvMap        = bits,    U08,    lastOffset, [4:4]

    advance         = scalar,   U16,    nextOffset, "deg",    1.000, 0.000
    dwell	        = scalar,   U16,    nextOffset, "us",     1.000, 0.00

    ;fueling
    fuelValid               = bits,    U16,    nextOffset, [0:0]
    fuelVeValid             = bits,    U16,    lastOffset, [1:1]
    fuelAfrValid            = bits,    U16,    lastOffset, [2:2]
    fuelBeginValid          = bits,    U16,    lastOffset, [3:3]
    fuelDryCrank            = bits,    U16,    lastOffset, [4:4]
    fuelSPDactive           = bits,    U16,    lastOffset, [5:5]
    fuelSeqMode             = bits,    U16,    lastOffset, [6:6]
    fuelDcClip              = bits,    U16,    lastOffset, [7:7]
    fuelWarmUpCompAct       = bits,    U16,    lastOffset, [8:8]
    fuelAfterStartCompAct   = bits,    U16,    lastOffset, [9:9]
    fuelLegacyAE            = bits,    U16,    lastOffset, [10:10]
    fuelLoadTransientComp   = bits,    U16,    lastOffset, [11:11]

    VE              = scalar,   F32,    nextOffset, "%",  1.000, 0.000
    AFRtgt          = scalar,   F32,    nextOffset, "AFR",  1.000, 0.000
    airRate         = scalar,   F32,    nextOffset, "g/s",  1.000, 0.000

    BasefuelMass    = scalar,   F32,    nextOffset, "ug",  1.000, 0.000
    TargetfuelMass  = scalar,   F32,    nextOffset, "ug",  1.000, 0.000
    CmdfuelMass     = scalar,   F32,    nextOffset, "ug",  1.000, 0.000
    WallfuelMass    = scalar,   F32,    nextOffset, "ug",  1.000, 0.000


    inj1Iv          = scalar,   U32,    nextOffset, "us",  1.000, 0.000
    inj2Iv          = scalar,   U32,    nextOffset, "us",  1.000, 0.000
    injDelay        = scalar,   U32,    nextOffset, "us",  1.000, 0.000
    injDcTgt        = scalar,   F32,    nextOffset, "%",  1.000, 0.000

    consumpt_1s    = scalar,   U32,    nextOffset, "ug",  1.000, 0.000



    ;size = 110


    time            = { timeNow } ; "timeNow" is a parameterless built-in function.
    seconds         = { secl };

    intake_vac      = { baro - MAP }
    AFR_diff        = { AFRtgt - AFR }
    FuelMassCorr_pct        = { (100 * TargetfuelMass / BasefuelMass) - 100 }

    FuelConsumpt_gph        = { (36 * consumpt_1s) / 10000 }

    speed        = { (36 * ground_speed) / 10000 }

    resVE_pct    =   { (100 * TargetfuelMass * AFR) / (airDens * 425) }

    ;reqKorr_pct    =   { (100 * AFR) / AFRtgt }
    reqKorr_pct    =   { (100 * AFR * TargetfuelMass) / (AFRtgt * BasefuelMass) }


;-------------------------------------------------------------------------------
